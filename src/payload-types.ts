/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    'meal-plans': MealPlan;
    'meal-logs': MealLog;
    'workout-plans': WorkoutPlan;
    'workout-logs': WorkoutLog;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'meal-plans': MealPlansSelect<false> | MealPlansSelect<true>;
    'meal-logs': MealLogsSelect<false> | MealLogsSelect<true>;
    'workout-plans': WorkoutPlansSelect<false> | WorkoutPlansSelect<true>;
    'workout-logs': WorkoutLogsSelect<false> | WorkoutLogsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    home: Home;
    navbar: Navbar;
    reviews: Review;
  };
  globalsSelect: {
    home: HomeSelect<false> | HomeSelect<true>;
    navbar: NavbarSelect<false> | NavbarSelect<true>;
    reviews: ReviewsSelect<false> | ReviewsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  dob?: string | null;
  phoneNumber?: string | null;
  gender?: ('male' | 'female' | 'other') | null;
  role: 'admin' | 'trainer' | 'user';
  plan: 'essential' | 'premium' | 'elite';
  OTP?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meal-plans".
 */
export interface MealPlan {
  id: string;
  /**
   * User this meal plan belongs to
   */
  user: string | User;
  /**
   * e.g., "Vegetarian Weight Loss Plan"
   */
  planName: string;
  status: 'active' | 'completed' | 'paused';
  dailyCalories: number;
  macros: {
    protein: number;
    carbs: number;
    fats: number;
  };
  mealsPerDay: number;
  days: {
    /**
     * 1-7 for a weekly rotating plan
     */
    dayNumber: number;
    /**
     * e.g., "Monday" or "Day 1"
     */
    dayName?: string | null;
    meals: {
      /**
       * e.g., "Protein Oats Bowl"
       */
      mealName: string;
      /**
       * e.g., "7:00 AM" or "Breakfast"
       */
      mealTime: string;
      calories: number;
      macros: {
        protein: number;
        carbs: number;
        fats: number;
      };
      ingredients: {
        item: string;
        /**
         * e.g., "60g" or "1 cup"
         */
        amount: string;
        id?: string | null;
      }[];
      instructions: string;
      prepTime: number;
      mealPrepFriendly?: boolean | null;
      imageUrl?: (string | null) | Media;
      tags?: ('quick' | 'high_protein' | 'low_carb' | 'vegetarian' | 'vegan')[] | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  shoppingList?: {
    produce?:
      | {
          item?: string | null;
          id?: string | null;
        }[]
      | null;
    dairy?:
      | {
          item?: string | null;
          id?: string | null;
        }[]
      | null;
    protein?:
      | {
          item?: string | null;
          id?: string | null;
        }[]
      | null;
    pantry?:
      | {
          item?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  mealPrepSchedule?:
    | {
        /**
         * e.g., "Sunday"
         */
        day?: string | null;
        tasks?:
          | {
              task?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Private notes about this meal plan
   */
  trainerNotes?: string | null;
  createdBy?: (string | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meal-logs".
 */
export interface MealLog {
  id: string;
  user: string | User;
  mealPlan?: (string | null) | MealPlan;
  date: string;
  mealTime: 'breakfast' | 'morning_snack' | 'lunch' | 'afternoon_snack' | 'dinner' | 'evening_snack';
  mealName: string;
  calories: number;
  macros?: {
    protein?: number | null;
    carbs?: number | null;
    fats?: number | null;
  };
  /**
   * Did you follow the meal plan?
   */
  adherence?: boolean | null;
  notes?: string | null;
  photo?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workout-plans".
 */
export interface WorkoutPlan {
  id: string;
  /**
   * User this workout plan belongs to
   */
  user: string | User;
  /**
   * e.g., "12-Week Weight Loss Program"
   */
  planName: string;
  /**
   * Current status of the workout plan
   */
  status: 'draft' | 'active' | 'completed' | 'paused';
  /**
   * Type of workout split
   */
  splitType: 'full_body' | 'upper_lower' | 'push_pull_legs' | 'body_part_split' | 'custom';
  /**
   * Number of workout days per week
   */
  daysPerWeek: number;
  /**
   * Average session duration in minutes
   */
  estimatedDuration: number;
  /**
   * Total program duration in weeks
   */
  totalWeeks: number;
  weeks: {
    weekNumber: number;
    /**
     * e.g., "Build foundation, focus on form"
     */
    focusNote?: string | null;
    days: {
      /**
       * 1-7 for Monday-Sunday
       */
      dayNumber: number;
      /**
       * e.g., "Upper Body Strength"
       */
      workoutName: string;
      estimatedDuration: number;
      exercises: {
        exerciseName: string;
        sets: number;
        /**
         * e.g., "8-10" or "12-15"
         */
        reps: string;
        /**
         * e.g., "90s" or "2 min"
         */
        rest: string;
        /**
         * Form cues, modifications, etc.
         */
        notes?: string | null;
        /**
         * Link to exercise demonstration
         */
        videoUrl?: string | null;
        alternatives?:
          | {
              exerciseName?: string | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[];
      warmup?: string | null;
      cooldown?: string | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  /**
   * How to progress through the program
   */
  progressionNotes?: string | null;
  /**
   * Private notes about this plan
   */
  trainerNotes?: string | null;
  /**
   * Trainer who created this plan
   */
  createdBy?: (string | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workout-logs".
 */
export interface WorkoutLog {
  id: string;
  user: string | User;
  /**
   * Link to the original workout plan
   */
  workoutPlan?: (string | null) | WorkoutPlan;
  date: string;
  workoutName: string;
  completed?: boolean | null;
  /**
   * Actual workout duration
   */
  duration?: number | null;
  exercises?:
    | {
        exerciseName: string;
        sets?:
          | {
              reps?: number | null;
              weight?: number | null;
              completed?: boolean | null;
              id?: string | null;
            }[]
          | null;
        notes?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * How did you feel? Any issues?
   */
  overallNotes?: string | null;
  /**
   * 1-5 stars
   */
  rating?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'meal-plans';
        value: string | MealPlan;
      } | null)
    | ({
        relationTo: 'meal-logs';
        value: string | MealLog;
      } | null)
    | ({
        relationTo: 'workout-plans';
        value: string | WorkoutPlan;
      } | null)
    | ({
        relationTo: 'workout-logs';
        value: string | WorkoutLog;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  dob?: T;
  phoneNumber?: T;
  gender?: T;
  role?: T;
  plan?: T;
  OTP?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meal-plans_select".
 */
export interface MealPlansSelect<T extends boolean = true> {
  user?: T;
  planName?: T;
  status?: T;
  dailyCalories?: T;
  macros?:
    | T
    | {
        protein?: T;
        carbs?: T;
        fats?: T;
      };
  mealsPerDay?: T;
  days?:
    | T
    | {
        dayNumber?: T;
        dayName?: T;
        meals?:
          | T
          | {
              mealName?: T;
              mealTime?: T;
              calories?: T;
              macros?:
                | T
                | {
                    protein?: T;
                    carbs?: T;
                    fats?: T;
                  };
              ingredients?:
                | T
                | {
                    item?: T;
                    amount?: T;
                    id?: T;
                  };
              instructions?: T;
              prepTime?: T;
              mealPrepFriendly?: T;
              imageUrl?: T;
              tags?: T;
              id?: T;
            };
        id?: T;
      };
  shoppingList?:
    | T
    | {
        produce?:
          | T
          | {
              item?: T;
              id?: T;
            };
        dairy?:
          | T
          | {
              item?: T;
              id?: T;
            };
        protein?:
          | T
          | {
              item?: T;
              id?: T;
            };
        pantry?:
          | T
          | {
              item?: T;
              id?: T;
            };
      };
  mealPrepSchedule?:
    | T
    | {
        day?: T;
        tasks?:
          | T
          | {
              task?: T;
              id?: T;
            };
        id?: T;
      };
  trainerNotes?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meal-logs_select".
 */
export interface MealLogsSelect<T extends boolean = true> {
  user?: T;
  mealPlan?: T;
  date?: T;
  mealTime?: T;
  mealName?: T;
  calories?: T;
  macros?:
    | T
    | {
        protein?: T;
        carbs?: T;
        fats?: T;
      };
  adherence?: T;
  notes?: T;
  photo?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workout-plans_select".
 */
export interface WorkoutPlansSelect<T extends boolean = true> {
  user?: T;
  planName?: T;
  status?: T;
  splitType?: T;
  daysPerWeek?: T;
  estimatedDuration?: T;
  totalWeeks?: T;
  weeks?:
    | T
    | {
        weekNumber?: T;
        focusNote?: T;
        days?:
          | T
          | {
              dayNumber?: T;
              workoutName?: T;
              estimatedDuration?: T;
              exercises?:
                | T
                | {
                    exerciseName?: T;
                    sets?: T;
                    reps?: T;
                    rest?: T;
                    notes?: T;
                    videoUrl?: T;
                    alternatives?:
                      | T
                      | {
                          exerciseName?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              warmup?: T;
              cooldown?: T;
              id?: T;
            };
        id?: T;
      };
  progressionNotes?: T;
  trainerNotes?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "workout-logs_select".
 */
export interface WorkoutLogsSelect<T extends boolean = true> {
  user?: T;
  workoutPlan?: T;
  date?: T;
  workoutName?: T;
  completed?: T;
  duration?: T;
  exercises?:
    | T
    | {
        exerciseName?: T;
        sets?:
          | T
          | {
              reps?: T;
              weight?: T;
              completed?: T;
              id?: T;
            };
        notes?: T;
        id?: T;
      };
  overallNotes?: T;
  rating?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home".
 */
export interface Home {
  id: string;
  heroSection: {
    backgroundImage: string | Media;
    title: string;
    subtitle?: string | null;
  };
  ctaButton1: {
    text: string;
    href: string;
  };
  ctaButton2: {
    text: string;
    href: string;
  };
  galleryImages?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar".
 */
export interface Navbar {
  id: string;
  logo: string | Media;
  navLinks?:
    | {
        title: string;
        href: string;
        id?: string | null;
      }[]
    | null;
  ctaButton: {
    text: string;
    href: string;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Review {
  id: string;
  reviews?:
    | {
        name: string;
        email: string;
        message: string;
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home_select".
 */
export interface HomeSelect<T extends boolean = true> {
  heroSection?:
    | T
    | {
        backgroundImage?: T;
        title?: T;
        subtitle?: T;
      };
  ctaButton1?:
    | T
    | {
        text?: T;
        href?: T;
      };
  ctaButton2?:
    | T
    | {
        text?: T;
        href?: T;
      };
  galleryImages?:
    | T
    | {
        image?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar_select".
 */
export interface NavbarSelect<T extends boolean = true> {
  logo?: T;
  navLinks?:
    | T
    | {
        title?: T;
        href?: T;
        id?: T;
      };
  ctaButton?:
    | T
    | {
        text?: T;
        href?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews_select".
 */
export interface ReviewsSelect<T extends boolean = true> {
  reviews?:
    | T
    | {
        name?: T;
        email?: T;
        message?: T;
        image?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}